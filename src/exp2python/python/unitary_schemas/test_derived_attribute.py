# This file was generated by exp2python.  You probably don't want to edit
# it since your modifications will be lost if exp2python is used to
# regenerate it.
import sys

from SCL.SCLBase import *
from SCL.SimpleDataTypes import *
from SCL.ConstructedDataTypes import *
from SCL.AggregationDataTypes import *
from SCL.TypeChecker import check_type
from SCL.Builtin import *
from SCL.Rules import *

schema_name = 'test_derived_attribute'

schema_scope = sys.modules[__name__]


####################
 # ENTITY vector #
####################
class vector(BaseEntityClass):
	'''Entity vector definition.
	'''
	# This class does not define any attribute.
	pass

####################
 # ENTITY circle #
####################
class circle(BaseEntityClass):
	'''Entity circle definition.

	:param centre
	:type centre:point

	:param radius
	:type radius:REAL

	:param axis
	:type axis:vector

	:param area
	:type area:REAL

	:param perimeter
	:type perimeter:REAL
	'''
	def __init__( self , centre,radius,axis, ):
		self.centre = centre
		self.radius = radius
		self.axis = axis

	@property
	def centre(self):
		return self._centre
	@centre.setter
	def centre( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument centre is mandatory and can not be set to None')
		if not check_type(value,point):
			self._centre = point(value)
		else:
			self._centre = value

	@property
	def radius(self):
		return self._radius
	@radius.setter
	def radius( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument radius is mandatory and can not be set to None')
		if not check_type(value,REAL):
			self._radius = REAL(value)
		else:
			self._radius = value

	@property
	def axis(self):
		return self._axis
	@axis.setter
	def axis( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument axis is mandatory and can not be set to None')
		if not check_type(value,vector):
			self._axis = vector(value)
		else:
			self._axis = value

	@property
	def area(self):
		attribute_eval = ( PI   *  (self.radius  **  2))
		return attribute_eval
	@area.setter
	def area( self, value ):
	# DERIVED argument
		raise AssertionError('Argument area is DERIVED. It is computed and can not be set to any value')

	@property
	def perimeter(self):
		attribute_eval = ((2  *   PI )  *  self.radius)
		return attribute_eval
	@perimeter.setter
	def perimeter( self, value ):
	# DERIVED argument
		raise AssertionError('Argument perimeter is DERIVED. It is computed and can not be set to any value')

####################
 # ENTITY point #
####################
class point(BaseEntityClass):
	'''Entity point definition.
	'''
	# This class does not define any attribute.
	pass
