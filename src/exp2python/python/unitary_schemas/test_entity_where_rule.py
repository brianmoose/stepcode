# This file was generated by exp2python.  You probably don't want to edit
# it since your modifications will be lost if exp2python is used to
# regenerate it.
import sys

from SCL.SCLBase import *
from SCL.SimpleDataTypes import *
from SCL.ConstructedDataTypes import *
from SCL.AggregationDataTypes import *
from SCL.TypeChecker import check_type
from SCL.Builtin import *
from SCL.Rules import *

schema_name = 'test_entity_where_rule'

schema_scope = sys.modules[__name__]

# Defined datatype label
class label(STRING):
	def __init__(self,*kargs):
		pass


####################
 # ENTITY unit_vector #
####################
class unit_vector(BaseEntityClass):
	'''Entity unit_vector definition.

	:param a
	:type a:REAL

	:param b
	:type b:REAL

	:param c
	:type c:REAL
	'''
	def __init__( self , a,b,c, ):
		self.a = a
		self.b = b
		self.c = c

	@property
	def a(self):
		return self._a
	@a.setter
	def a( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument a is mandatory and can not be set to None')
		if not check_type(value,REAL):
			self._a = REAL(value)
		else:
			self._a = value

	@property
	def b(self):
		return self._b
	@b.setter
	def b( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument b is mandatory and can not be set to None')
		if not check_type(value,REAL):
			self._b = REAL(value)
		else:
			self._b = value

	@property
	def c(self):
		return self._c
	@c.setter
	def c( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument c is mandatory and can not be set to None')
		if not check_type(value,REAL):
			self._c = REAL(value)
		else:
			self._c = value

	def length_1(self):
		eval_length_1_wr = ((((self.a  **  2)  +  (self.b  **  2))  +  (self.c  **  2))  ==  1)
		if not eval_length_1_wr:
			raise AssertionError('Rule length_1 violated')
		else:
			return eval_length_1_wr


####################
 # ENTITY address #
####################
class address(BaseEntityClass):
	'''Entity address definition.

	:param internal_location
	:type internal_location:label

	:param street_number
	:type street_number:label

	:param street
	:type street:label

	:param postal_box
	:type postal_box:label

	:param town
	:type town:label

	:param region
	:type region:label

	:param postal_code
	:type postal_code:label

	:param country
	:type country:label

	:param facsimile_number
	:type facsimile_number:label

	:param telephone_number
	:type telephone_number:label

	:param electronic_mail_address
	:type electronic_mail_address:label

	:param telex_number
	:type telex_number:label
	'''
	def __init__( self , internal_location,street_number,street,postal_box,town,region,postal_code,country,facsimile_number,telephone_number,electronic_mail_address,telex_number, ):
		self.internal_location = internal_location
		self.street_number = street_number
		self.street = street
		self.postal_box = postal_box
		self.town = town
		self.region = region
		self.postal_code = postal_code
		self.country = country
		self.facsimile_number = facsimile_number
		self.telephone_number = telephone_number
		self.electronic_mail_address = electronic_mail_address
		self.telex_number = telex_number

	@property
	def internal_location(self):
		return self._internal_location
	@internal_location.setter
	def internal_location( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._internal_location = label(value)
			else:
				self._internal_location = value
		else:
			self._internal_location = value

	@property
	def street_number(self):
		return self._street_number
	@street_number.setter
	def street_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._street_number = label(value)
			else:
				self._street_number = value
		else:
			self._street_number = value

	@property
	def street(self):
		return self._street
	@street.setter
	def street( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._street = label(value)
			else:
				self._street = value
		else:
			self._street = value

	@property
	def postal_box(self):
		return self._postal_box
	@postal_box.setter
	def postal_box( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._postal_box = label(value)
			else:
				self._postal_box = value
		else:
			self._postal_box = value

	@property
	def town(self):
		return self._town
	@town.setter
	def town( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._town = label(value)
			else:
				self._town = value
		else:
			self._town = value

	@property
	def region(self):
		return self._region
	@region.setter
	def region( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._region = label(value)
			else:
				self._region = value
		else:
			self._region = value

	@property
	def postal_code(self):
		return self._postal_code
	@postal_code.setter
	def postal_code( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._postal_code = label(value)
			else:
				self._postal_code = value
		else:
			self._postal_code = value

	@property
	def country(self):
		return self._country
	@country.setter
	def country( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._country = label(value)
			else:
				self._country = value
		else:
			self._country = value

	@property
	def facsimile_number(self):
		return self._facsimile_number
	@facsimile_number.setter
	def facsimile_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._facsimile_number = label(value)
			else:
				self._facsimile_number = value
		else:
			self._facsimile_number = value

	@property
	def telephone_number(self):
		return self._telephone_number
	@telephone_number.setter
	def telephone_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._telephone_number = label(value)
			else:
				self._telephone_number = value
		else:
			self._telephone_number = value

	@property
	def electronic_mail_address(self):
		return self._electronic_mail_address
	@electronic_mail_address.setter
	def electronic_mail_address( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._electronic_mail_address = label(value)
			else:
				self._electronic_mail_address = value
		else:
			self._electronic_mail_address = value

	@property
	def telex_number(self):
		return self._telex_number
	@telex_number.setter
	def telex_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._telex_number = label(value)
			else:
				self._telex_number = value
		else:
			self._telex_number = value

	def wr1(self):
		eval_wr1_wr = (((((((((((EXISTS(self.internal_location)  or  EXISTS(self.street_number))  or  EXISTS(self.street))  or  EXISTS(self.postal_box))  or  EXISTS(self.town))  or  EXISTS(self.region))  or  EXISTS(self.postal_code))  or  EXISTS(self.country))  or  EXISTS(self.facsimile_number))  or  EXISTS(self.telephone_number))  or  EXISTS(self.electronic_mail_address))  or  EXISTS(self.telex_number))
		if not eval_wr1_wr:
			raise AssertionError('Rule wr1 violated')
		else:
			return eval_wr1_wr

