# This file was generated by exp2python.  You probably don't want to edit
# it since your modifications will be lost if exp2python is used to
# regenerate it.
import sys

from SCL.SCLBase import *
from SCL.SimpleDataTypes import *
from SCL.ConstructedDataTypes import *
from SCL.AggregationDataTypes import *
from SCL.TypeChecker import check_type
from SCL.Builtin import *
from SCL.Rules import *

schema_name = 'test_multiple_inheritance'

schema_scope = sys.modules[__name__]

# SELECT TYPE classification_item
classification_item = SELECT(
	'person_and_organization_address',
	'address',
	scope = schema_scope)
# Defined datatype text
class text(STRING):
	def __init__(self,*kargs):
		pass

# Defined datatype identifier
class identifier(STRING):
	def __init__(self,*kargs):
		pass

# Defined datatype label
class label(STRING):
	def __init__(self,*kargs):
		pass


####################
 # ENTITY address #
####################
class address(BaseEntityClass):
	'''Entity address definition.

	:param internal_location
	:type internal_location:label

	:param street_number
	:type street_number:label

	:param street
	:type street:label

	:param postal_box
	:type postal_box:label

	:param town
	:type town:label

	:param region
	:type region:label

	:param postal_code
	:type postal_code:label

	:param country
	:type country:label

	:param facsimile_number
	:type facsimile_number:label

	:param telephone_number
	:type telephone_number:label

	:param electronic_mail_address
	:type electronic_mail_address:label

	:param telex_number
	:type telex_number:label
	'''
	def __init__( self , internal_location,street_number,street,postal_box,town,region,postal_code,country,facsimile_number,telephone_number,electronic_mail_address,telex_number, ):
		self.internal_location = internal_location
		self.street_number = street_number
		self.street = street
		self.postal_box = postal_box
		self.town = town
		self.region = region
		self.postal_code = postal_code
		self.country = country
		self.facsimile_number = facsimile_number
		self.telephone_number = telephone_number
		self.electronic_mail_address = electronic_mail_address
		self.telex_number = telex_number

	@property
	def internal_location(self):
		return self._internal_location
	@internal_location.setter
	def internal_location( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._internal_location = label(value)
			else:
				self._internal_location = value
		else:
			self._internal_location = value

	@property
	def street_number(self):
		return self._street_number
	@street_number.setter
	def street_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._street_number = label(value)
			else:
				self._street_number = value
		else:
			self._street_number = value

	@property
	def street(self):
		return self._street
	@street.setter
	def street( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._street = label(value)
			else:
				self._street = value
		else:
			self._street = value

	@property
	def postal_box(self):
		return self._postal_box
	@postal_box.setter
	def postal_box( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._postal_box = label(value)
			else:
				self._postal_box = value
		else:
			self._postal_box = value

	@property
	def town(self):
		return self._town
	@town.setter
	def town( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._town = label(value)
			else:
				self._town = value
		else:
			self._town = value

	@property
	def region(self):
		return self._region
	@region.setter
	def region( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._region = label(value)
			else:
				self._region = value
		else:
			self._region = value

	@property
	def postal_code(self):
		return self._postal_code
	@postal_code.setter
	def postal_code( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._postal_code = label(value)
			else:
				self._postal_code = value
		else:
			self._postal_code = value

	@property
	def country(self):
		return self._country
	@country.setter
	def country( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._country = label(value)
			else:
				self._country = value
		else:
			self._country = value

	@property
	def facsimile_number(self):
		return self._facsimile_number
	@facsimile_number.setter
	def facsimile_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._facsimile_number = label(value)
			else:
				self._facsimile_number = value
		else:
			self._facsimile_number = value

	@property
	def telephone_number(self):
		return self._telephone_number
	@telephone_number.setter
	def telephone_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._telephone_number = label(value)
			else:
				self._telephone_number = value
		else:
			self._telephone_number = value

	@property
	def electronic_mail_address(self):
		return self._electronic_mail_address
	@electronic_mail_address.setter
	def electronic_mail_address( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._electronic_mail_address = label(value)
			else:
				self._electronic_mail_address = value
		else:
			self._electronic_mail_address = value

	@property
	def telex_number(self):
		return self._telex_number
	@telex_number.setter
	def telex_number( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._telex_number = label(value)
			else:
				self._telex_number = value
		else:
			self._telex_number = value

####################
 # ENTITY personal_address #
####################
class personal_address(address):
	'''Entity personal_address definition.

	:param people
	:type people:SET(1,None,'person', scope = schema_scope)

	:param description
	:type description:text
	'''
	def __init__( self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , people,description, ):
		address.__init__(self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , )
		self.people = people
		self.description = description

	@property
	def people():
		return self._people
	@people.setter
	def people( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument people is mandatory and can not be set to None')
		if not check_type(value,SET(1,None,'person', scope = schema_scope)):
			self._people = SET(value)
		else:
			self._people = value

	@property
	def description():
		return self._description
	@description.setter
	def description( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,text):
				self._description = text(value)
			else:
				self._description = value
		else:
			self._description = value

####################
 # ENTITY organizational_address #
####################
class organizational_address(address):
	'''Entity organizational_address definition.

	:param organizations
	:type organizations:SET(1,None,'organization', scope = schema_scope)

	:param description
	:type description:text
	'''
	def __init__( self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , organizations,description, ):
		address.__init__(self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , )
		self.organizations = organizations
		self.description = description

	@property
	def organizations():
		return self._organizations
	@organizations.setter
	def organizations( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument organizations is mandatory and can not be set to None')
		if not check_type(value,SET(1,None,'organization', scope = schema_scope)):
			self._organizations = SET(value)
		else:
			self._organizations = value

	@property
	def description():
		return self._description
	@description.setter
	def description( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,text):
				self._description = text(value)
			else:
				self._description = value
		else:
			self._description = value

####################
 # ENTITY person #
####################
class person(BaseEntityClass):
	'''Entity person definition.

	:param id
	:type id:identifier

	:param last_name
	:type last_name:label

	:param first_name
	:type first_name:label

	:param middle_names
	:type middle_names:LIST(1,None,'STRING', scope = schema_scope)

	:param prefix_titles
	:type prefix_titles:LIST(1,None,'STRING', scope = schema_scope)

	:param suffix_titles
	:type suffix_titles:LIST(1,None,'STRING', scope = schema_scope)
	'''
	def __init__( self , id,last_name,first_name,middle_names,prefix_titles,suffix_titles, ):
		self.id = id
		self.last_name = last_name
		self.first_name = first_name
		self.middle_names = middle_names
		self.prefix_titles = prefix_titles
		self.suffix_titles = suffix_titles

	@property
	def id(self):
		return self._id
	@id.setter
	def id( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument id is mandatory and can not be set to None')
		if not check_type(value,identifier):
			self._id = identifier(value)
		else:
			self._id = value

	@property
	def last_name(self):
		return self._last_name
	@last_name.setter
	def last_name( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._last_name = label(value)
			else:
				self._last_name = value
		else:
			self._last_name = value

	@property
	def first_name(self):
		return self._first_name
	@first_name.setter
	def first_name( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,label):
				self._first_name = label(value)
			else:
				self._first_name = value
		else:
			self._first_name = value

	@property
	def middle_names(self):
		return self._middle_names
	@middle_names.setter
	def middle_names( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,LIST(1,None,'STRING', scope = schema_scope)):
				self._middle_names = LIST(value)
			else:
				self._middle_names = value
		else:
			self._middle_names = value

	@property
	def prefix_titles(self):
		return self._prefix_titles
	@prefix_titles.setter
	def prefix_titles( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,LIST(1,None,'STRING', scope = schema_scope)):
				self._prefix_titles = LIST(value)
			else:
				self._prefix_titles = value
		else:
			self._prefix_titles = value

	@property
	def suffix_titles(self):
		return self._suffix_titles
	@suffix_titles
	def suffix_titles( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,LIST(1,None,'STRING', scope = schema_scope)):
				self._suffix_titles = LIST(value)
			else:
				self._suffix_titles = value
		else:
			self._suffix_titles = value

	def wr1(self):
		eval_wr1_wr = (EXISTS(self.last_name)  or  EXISTS(self.first_name))
		if not eval_wr1_wr:
			raise AssertionError('Rule wr1 violated')
		else:
			return eval_wr1_wr


####################
 # ENTITY organization #
####################
class organization(BaseEntityClass):
	'''Entity organization definition.

	:param id
	:type id:identifier

	:param name
	:type name:label

	:param description
	:type description:text
	'''
	def __init__( self , id,name,description, ):
		self.id = id
		self.name = name
		self.description = description

	@property
	def id(self):
		return self._id
	@id.setter
	def id( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,identifier):
				self._id = identifier(value)
			else:
				self._id = value
		else:
			self._id = value

	@property
	def name(self):
		return self._name
	@name.setter
	def name( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument name is mandatory and can not be set to None')
		if not check_type(value,label):
			self._name = label(value)
		else:
			self._name = value

	@property
	def description(self):
		return self._description
	@description.setter
	def description( self, value ):
		if value != None: # OPTIONAL attribute
			if not check_type(value,text):
				self._description = text(value)
			else:
				self._description = value
		else:
			self._description = value

####################
 # ENTITY person_and_organization_address #
####################
class person_and_organization_address(organizational_address,personal_address):
	'''Entity person_and_organization_address definition.

	:param organizational_address_organizations
	:type organizational_address_organizations:SET(1,1,'organization', scope = schema_scope)

	:param personal_address_people
	:type personal_address_people:SET(1,1,'person', scope = schema_scope)
	'''
	def __init__( self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , inherited12__organizations , inherited13__description , inherited14__internal_location , inherited15__street_number , inherited16__street , inherited17__postal_box , inherited18__town , inherited19__region , inherited20__postal_code , inherited21__country , inherited22__facsimile_number , inherited23__telephone_number , inherited24__electronic_mail_address , inherited25__telex_number , inherited26__people , inherited27__description , organizational_address_organizations,personal_address_people, ):
		organizational_address.__init__(self , inherited0__internal_location , inherited1__street_number , inherited2__street , inherited3__postal_box , inherited4__town , inherited5__region , inherited6__postal_code , inherited7__country , inherited8__facsimile_number , inherited9__telephone_number , inherited10__electronic_mail_address , inherited11__telex_number , inherited12__organizations , inherited13__description , )
		personal_address.__init__(self , inherited14__internal_location , inherited15__street_number , inherited16__street , inherited17__postal_box , inherited18__town , inherited19__region , inherited20__postal_code , inherited21__country , inherited22__facsimile_number , inherited23__telephone_number , inherited24__electronic_mail_address , inherited25__telex_number , inherited26__people , inherited27__description , )
		self.organizational_address_organizations = organizational_address_organizations
		self.personal_address_people = personal_address_people

	@property
	def organizational_address_organizations(self):
		return self._organizational_address_organizations
	@organizational_address_organizations.setter
	def organizational_address_organizations( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument organizational_address_organizations is mandatory and can not be set to None')
		if not check_type(value,SET(1,1,'organization', scope = schema_scope)):
			self._organizational_address_organizations = SET(value)
		else:
			self._organizational_address_organizations = value

	@property
	def personal_address_people(self):
		return self._personal_address_people
	@personal_address_people.setter
	def personal_address_people( self, value ):
	# Mandatory argument
		if value==None:
			raise AssertionError('Argument personal_address_people is mandatory and can not be set to None')
		if not check_type(value,SET(1,1,'person', scope = schema_scope)):
			self._personal_address_people = SET(value)
		else:
			self._personal_address_people = value
